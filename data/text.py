from aiogram.utils.markdown import hbold, hlink
from databases import Rusak, Users
import aiofiles
import json
import random
from typing import Tuple


help = f"""–ü—Ä–∏–≤—ñ—Ç —è {hbold('–î—ñ—è.–†–µ–π—Ç–∏–Ω–≥ –±–æ—Ç')} üá∫üá¶, —è —Ä–∞—Ö—É—é —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≤ —á–∞—Ç—ñ .

–©–æ–± –ø–æ–≤–∏—Å–∏—Ç–∏/–ø–æ–Ω–∏–∑–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å–Ω–∏–∫–∞ –∑—Ä–æ–±–∏ –Ω–∞ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (reply) —ñ –≤–∏–±–µ—Ä–∏ –∑ {hlink('—Å—Ç—ñ–∫–µ—Ä–ø–∞–∫—É', 'https://t.me/addstickers/diamarks')} –î—ñ—ó –±–∞–ª –Ω–∞ —è–∫–∏–π —Ç–∏ —Ö–æ—á–µ—à –æ—Ü—ñ–Ω–∏—Ç–∏ —Å–≤–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞.

–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ üóí
/help ‚Äî –ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º
/alert ‚Äî –ö–∞—Ä—Ç–∞ —Ç—Ä–∏–≤–æ–≥
/casualties ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ç—Ä–∞—Ç –≤–æ—Ä–æ–≥–∞
/random_day ‚Äî –†–∞–Ω–¥–æ–º–Ω–∞ –ø–æ–¥—ñ—è –¥–Ω—è –∑ —Ä–∞–Ω–¥–æ–º–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –¥—ñ—è.–±–æ—Ç–∞ 

–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –¥—ñ—è.—Ä–µ–π–Ω–∏–≥—É üìä
/my_rating - –º—ñ–π –¥—ñ—è.—Ä–µ–π—Ç–∏–Ω–≥
/mine - –º–∞–π–Ω—ñ–Ω–≥ –¥—ñ—è.–±–∞–ª—ñ–≤
/top_all_10 - –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥—ñ—è.–±–æ—Ç–æ–º
/top - —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥—ñ—è.–±–æ—Ç–æ–º —É –≥—Ä—É–ø—ñ
/present - –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ –¥—ñ—è.–±–∞–ª–∏ –ª—é–¥–∏–Ω—ñ. –ó—Ä–æ–±–∏ (reply) –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –π –Ω–∞–ø–∏—à–∏ /present —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ —è–∫—ñ —Ö–æ—á–µ—à –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏.

–†—É—Å–∞–∫–∏ üê∑
/donbass - –≤–ø—ñ–π–º–∞—Ç–∏ —Ä—É—Å–∞–∫–∞
/rusak - –º—ñ–π —Ä—É—Å–∞–∫
/kill_rusak - –≤–±–∏—Ç–∏ —Ä—É—Å–∞–∫–∞
/compare_rusak - –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ä—É—Å–∞–∫—ñ–≤

–¶—ñ–∫–∞—Ñ—ñ —Ñ—ñ—á—ñ üíÖ
/check_content - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä—ñ–≤–µ–Ω—å –∫—Ä—ñ–Ω–∂—ñ
/dollar_rate - –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –¥–æ –≥—Ä–∏–≤–Ω—ñ
–ù–∞–ø–∏—à—ñ—Ç—å @diaratingbot —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ —Ü—ñ–∫–∞–≤–∏–Ω–æ–∫

–Ø –ø—Ä–∞—Ü—é—é –≤ –±—É–¥—å-—è–∫–∏—Ö –≥—Ä—É–ø–∞—Ö, —Ç–æ–º—É —Ç–∏ –º–æ–∂–µ—à –¥–æ–±–∞–≤–∏—Ç–∏ –º–µ–Ω–µ –∫—É–¥–∏—Å—å —â–µ üòâ"""

cringe_text = [
    "üÜò –í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ø–ª–æ—à–Ω–∏–π –∫—Ä—ñ–Ω–∂. üÜò\n–°–ë–£ —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏–º–µ –∑–∞ –í–∞–º–∏.",
    "‚ö†Ô∏è –í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –º—ñ—Å—Ç–∏—Ç—å –∑–∞–±–∞–≥–∞—Ç–æ –∫—Ä—ñ–Ω–∂—ñ. ‚ö†Ô∏è\n–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –±–∞–∑–∞—Ä–æ–º.",
    "‚ò£Ô∏è –£–≤–∞–≥–∞ —Ç–æ–∫—Å–∏—á–Ω–∞ –Ω–µ–±–µ–∑–ø–µ–∫–∞. ‚ò£Ô∏è\n–ù–µ–≥–∞–π–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ —ñ–∑–æ–ª—è—Ç–æ—Ä",
    "üåä –ó–∞–±–∞–≥–∞—Ç–æ —Ñ–ª—É–¥—É, –∑–∞–ª–∏—à—Ç–µ —á–∞—Ç –Ω–∞ 1 –≥–æ–¥–∏–Ω—É üåä",
    "–í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –Ω–æ—Ä–º—ñ, –∞–ª–µ –±–∞–∑–∏ –Ω–µ –Ω–∞–±–ª—é–¥–∞—î—Ç—å—Å—è.",
    "‚úÖ –í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç —î –≤–∫—Ä–∞–π –≥—Ä—É–Ω—Ç–æ–≤–Ω–∏–º. ‚úÖ",
    "‚úÖ –û—Ü–µ –≤–∏ —Ñ–∞–π–Ω–æ –±–∞–∑–∞–Ω—É–ª–∏. –ú–∏ –Ω–∞–≤—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –Ω–µ –≤—Ç—è–º–∏–ª–∏! ‚úÖ",
    "üá∫üá¶ –í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –¥—É–∂–µ –ø–∞—Ç—Ä—ñ–æ—Ç–∏—á–Ω–∏–π! –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ üá∫üá¶"
]

ideologies = [
    "–ê–Ω–∞—Ä—Ö—ñ–∑–º",
    "–í–µ–ª–∏–∫–æ–¥–µ—Ä–∂–∞–≤–Ω–∏–π —à–æ–≤—ñ–Ω—ñ–∑–º",
    "–Ü–º–ø–µ—Ä—ñ–∞–ª—ñ–∑–º",
    "–ö–ª–∞—Å–∏—á–Ω–∏–π –ª—ñ–±–µ—Ä–∞–ª—ñ–∑–º",
    "–ö–æ–º—É–Ω—ñ–∑–º",
    "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–∑–º",
    "–õ—ñ–±–µ—Ä–∞–ª—å–Ω–∞ –¥–µ–º–æ–∫—Ä–∞—Ç—ñ—è",
    "–ú–æ–Ω–∞—Ä—Ö—ñ–∑–º",
    "–ù–∞—Ü–∏–∑–º",
    "–ù–∞—Ü—ñ–æ–Ω–∞–ª-–∞–Ω–∞—Ä—Ö—ñ–∑–º",
    "–ù–∞—Ü—ñ–æ–Ω–∞–ª-–±—ñ–ª—å—à–æ–≤–∏–∑–º",
    "–ù–∞—Ü—ñ–æ–Ω–∞–ª-–∫–æ–º—É–Ω—ñ–∑–º",
    "–ù–∞—Ü—ñ–æ–Ω–∞–ª—ñ–∑–º",
    "–ù–µ–æ—Ñ–∞—à–∏–∑–º",
    "–†–µ—Å–ø—É–±–ª—ñ–∫–∞–Ω—ñ–∑–º",
    "–†–∞—à–∏–∑–º",
    "–°–æ—Ü—ñ–∞–ª-–¥–µ–º–æ–∫—Ä–∞—Ç—ñ—è",
    "–°–æ—Ü—ñ–∞–ª—ñ–∑–º",
    "–°—Ç–∞–ª—ñ–Ω—ñ–∑–º",
    "–¢–æ—Ç–∞–ª—ñ—Ç–∞—Ä–∏–∑–º",
    "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –Ω–∞—Ü—ñ–æ–Ω–∞–ª—ñ–∑–º",
    "–§–∞—à–∏–∑–º",
    "–•—Ä–∏—Å—Ç–∏—è–Ω—Å—å–∫–∞ –¥–µ–º–æ–∫—Ä–∞—Ç—ñ—è",
    "–¶–µ–Ω—Ç—Ä–∏–∑–º",
    "–ù–µ–æ–∫–æ–º—É–Ω—ñ–∑–º",
]

spots_exercises = [
    "–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è",
    "–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è",
    "–ü—Ä–µ—Å",
]

async def topics():
    async with aiofiles.open("data/topics.txt", "r", encoding="utf-8") as file:
        return random.choice(await file.readlines())

async def past_lifes():
    async with aiofiles.open("data/past_life.txt", "r", encoding="utf-8") as file:
        return random.choice(await file.readlines())

async def inline_answers(query: str):
    percentrage = random.randint(0, 100)
    heart = ("üíî", "‚ù§Ô∏è‚Äçü©π", "üíú", "üíñ", "‚ù§Ô∏è‚Äçüî•")[percentrage//25]
    past_live = await past_lifes()
    ideology = random.choice(ideologies)
    exercise = random.choice(spots_exercises)
    count_of_exercises = random.randint(5, 50)
    topic = await topics()
    return {
        "love" : f"–í–∏ –π {query} –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –Ω–∞ {heart} {percentrage}% {heart}",
        "past_live" : f"–í –º–∏–Ω—É–ª–æ–º—É –∂–∏—Ç—Ç—ñ —Ç–∏ –±—É–≤ {past_live}",
        "ideology" : f"–¢–≤–æ—è –ø–æ–ª—ñ—Ç–∏—á–Ω–∞ —ñ–¥–µ–æ–ª–æ–≥—ñ—è: {ideology}",
        "exercises" : f"{exercise} {count_of_exercises} —Ä–∞–∑—ñ–≤!",
        "topic" : f"–©–æ—Å—å —Ç–∏—Ö–æ —Ç—É—Ç. –î–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º–æ –Ω–∞ —Ç–µ–º—É:\n{topic}"
    }

def rusak_info(user_full_name, name, intelligent, strength, rashism, health):
    emojies = list("üöΩüóøüöú‚òÉÔ∏èüêíüê∑ü™ñü§°üí©üëΩ")
    emoji = random.choice(emojies)
    return f"{emoji} –†—É—Å–∞–∫ —É {user_full_name}: \n\n" +\
        f"üìù –Ü–º'—è: {name}\n" +\
        f"üß† –Ü–Ω—Ç–µ–ª–µ–∫—Ç: {intelligent}\n" +\
        f"üí™ –°–∏–ª–∞: {strength}\n" +\
        f"üëΩ –†—ñ–≤–µ–Ω—å —Ä–∞—à–∏–∑–º—É: {rashism}%\n" +\
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è: {health}%"

def format_top_10(top):
    result = "–¢–æ–ø 10 –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –î—ñ—è.–†–µ–π—Ç–∏–Ω–≥–æ–º:\n"
    medals = "üèÜüéñüèÖü•áü•àü•â"
    for i, info in enumerate(top):
        name, rating = info
        if i < len(medals): 
            result += f"{medals[i]} {i+1}. {hbold(name)} - {rating} –¥—ñ—è.–±–∞–ª—ñ–≤\n"
        else:
            result += f"{i+1}. {hbold(name)} {rating} –¥—ñ—è.–±–∞–ª—ñ–≤\n"
    return result

def format_top(top):
    result = "–¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –î—ñ—è.–†–µ–π—Ç–∏–Ω–≥–æ–º —É –≥—Ä—É–ø—ñ:\n"
    for i, info in enumerate(top, 1):
        name, rating = info
        if i % 10 == 0: result += "\n"
        result += f"{i}. {hbold(name)} {rating} –¥—ñ—è.–±–∞–ª—ñ–≤\n"
    return result

def format_comparing_rusak(rusak1: Rusak, rusak2: Rusak):
    return f"{rusak1.name} - {rusak2.name}\n" +\
            f"üß† –Ü–Ω—Ç–µ–ª–µ–∫—Ç: {rusak1.intellect} - {rusak2.intellect}\n" +\
            f"üí™ –°–∏–ª–∞: {rusak1.strength} - {rusak2.strength}\n" +\
            f"üëΩ –†–∞—à–∏–∑–º: {rusak1.rashism}% - {rusak2.rashism}%\n" +\
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è: {rusak1.health}% - {rusak2.health}%\n"

class FormatStatus():
    filepath = "data/status.json"
    def __init__(self):
        file = open(self.filepath, "r", encoding="utf-8") 
        self.status = json.load(file)
    def __call__(self, text, rating):
        ratings = list(self.status.keys())
        if rating >= int(ratings[-1]):
            return text+"\n"+random.choice(self.status[ratings[-1]])
        elif rating <= int(ratings[0]):
            return text+"\n"+random.choice(self.status[ratings[0]])
        for i, rate in enumerate(ratings):
            rate = int(rate)
            if rating == rate:
                status_id = str(rate)
                break
            elif rate < 0:
                if rating < rate:
                    status_id = str(rate)
                    break
            elif rate > 0:
                if rating < rate:
                    status_id = ratings[i-1] 
                    break
        return text+"\n"+random.choice(self.status[status_id])

format_status = FormatStatus()

class FormatRandomDay():
    filepath = "data/random_day.txt"
    def __init__(self):
        file = open(self.filepath, "r", encoding="utf-8") 
        self.textlist = file.readlines()
        for i in range(len(self.textlist)):
            self.textlist[i] = self.textlist[i].replace('\\n', '\n')
            self.textlist[i] = self.textlist[i].replace('\\t', '\t')

    def format_text(self, users: list[Users]) -> Tuple[str, int, list[Users]]:
        text_id = random.randrange(0, len(self.textlist))
        text = self.textlist[text_id]
        n_users = text.count('@{}')
        users = random.choices(users, k=n_users)
        usernames = [user.username for user in users]
        return text.format(*usernames), text_id, users
    
    def format_text_by_text_id(self, users: list[Users], text_id) -> str:
        usernames = [user.username for user in users]
        text: str = self.textlist[text_id]
        n_users = text.count('@{}')
        while len(usernames) < n_users:
            usernames.append(usernames[-1])
        return text.format(*usernames)

format_random_day = FormatRandomDay()